package fr.eurecom.dsg.mapreduce;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableUtils;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


/****************************
 * 
 * OGGETTI DI LAVORO
 *
 ***********************/

@SuppressWarnings("rawtypes")
class CompositeKey implements WritableComparable {

	private short day;
	private short month;
	private String carrier;
	private int delay;

	public CompositeKey() {
	}

	public CompositeKey(short day, short month, String carrier, int delay) {
		this.day = day;
		this.month = month;
		this.carrier = carrier;
		this.delay = delay;
	}

	public CompositeKey(CompositeKey c){
		this.day = c.day;
		this.month = c.month;
		this.carrier = c.carrier;
		this.delay = c.delay;
	}

	@Override
	public String toString() {
		return (new StringBuilder()).append("(").append(month).append(',').append(dow).append(")").toString();
	}

	@Override
	public void readFields(DataInput in) throws IOException {

		month = (short) WritableUtils.readVInt(in);
		day = (short) WritableUtils.readVInt(in);
		carrier = WritableUtils.readString(in);
		delay = WritableUtils.readVInt(in);
	}

	@Override
	public void write(DataOutput out) throws IOException {

		WritableUtils.writeVInt(out, month);
		WritableUtils.writeVInt(out, day);
		WritableUtils.writeString(out, carrier);
		WritableUtils.writeVInt(out, delay);
	}

	public short getDay(){
		return this.day;
	}

	public void setDay(short day){
		this.day = day;
	}

	public short getMonth(){
		return this.month;
	}

	public void setMonth(short month){
		this.month = month;
	}

	public String getCarrier(){
		return this.carrier;
	}

	public void setDow(int dow){
		this.dow = dow;
	}

	public int getDelay(){
		return this.delay;
	}

	//delay = arrival time - scheduled arrival time
	public void setDelay(int arrtime, int satime){
		this.delay = arrtime - satime;
	}


	//il delay cambia da giorno a giorno, quindi devo solo raggruppare per mese e dow
	@Override
	public int compareTo(Object o) {
		CompositeKey oComp = (CompositeKey) o;
		int result;
		Integer month1 = Integer.valueOf(month);
		Integer month2 = Integer.valueOf(oComp.month);		
		Integer dow1 = Integer.valueOf(dow);
		Integer dow2 = Integer.valueOf(oComp.dow);		

		result = month1.compareTo(month2);
		if (0 == result) {
			result = dow1.compareTo(dow2);
		}
		return result;
	}

	@Override
	public boolean equals(Object o) {
		CompositeKey temp = (CompositeKey) o;

		if (this == temp) 
			return true;
		else if (temp == null || getClass() != temp.getClass()) 
			return false;
		else{
			if(this.month == temp.month && this.dow == temp.dow)
				return true;
			else
				return false;
		}
	}

	@Override
	public int hashCode(){
		String builder = "";
		builder += this.month;
		builder += this.dow;
		return builder.hashCode();
	}

}


/*****************************************************************************************/
/*************************** JOB 1 *******************************************************/
/*****************************************************************************************/

/****************************
 * 
 * MAPPER
 *
 ***********************/

class WCAirplaneMapper extends Mapper<LongWritable, //input key type
Text, //input value type
CompositeKey, //output key type
IntWritable> { //output value type

	protected boolean isNotEmpty(String s){
		return (s != null && !s.isEmpty());
	}

	protected boolean isNumber(String s){
		return s.matches("-?\\d+(\\.\\d+)?");
	}

	@Override
	protected void map(LongWritable key, //input key type
			Text value, //input value type
			Context context) throws IOException, InterruptedException {

		//the map method (use context.write to emit results)
		CompositeKey obj1 = new CompositeKey();

		String[] words = value.toString().split(",");
		//mouth 1, day 2, dow 3, arrtime 6, satime 7
		if(words.length > 7){
			words[1].replaceAll("[,;\\s]", "");
			words[2].replaceAll("[,;\\s]", "");
			words[3].replaceAll("[,;\\s]", "");
			words[6].replaceAll("[,;\\s]", "");
			words[7].replaceAll("[,;\\s]", "");

			if(isNotEmpty(words[1]) && isNotEmpty(words[2]) && isNotEmpty(words[3]) && isNotEmpty(words[6]) && isNotEmpty(words[7]) 
					&& isNumber(words[1]) && isNumber(words[2]) && isNumber(words[3]) && isNumber(words[6]) && isNumber(words[7])){
				obj1.setDay((short)Integer.parseInt(words[2]));
				obj1.setMonth((short)Integer.parseInt(words[1]));
				obj1.setDow(Integer.parseInt(words[3]));
				obj1.setDelay(Integer.parseInt(words[6]), Integer.parseInt(words[7]));
				context.write(obj1, new IntWritable(1));
			}
		}

	}

}

/****************************
 * 
 * REDUCER
 *
 ***********************/

class WCAirplaneReducer extends Reducer<CompositeKey, //input key type
IntWritable, //input value type
Text, //output key type
Text> { //output value type

	@Override
	protected void reduce(CompositeKey obj, //input key type
			Iterable<IntWritable> values, //input value type
			Context context) throws IOException, InterruptedException {

		//reduce method (use context.write to emit results)
		double total_sum=0;
		double delayed_sum=0;
		double ratio;
		for(IntWritable v:values){
			total_sum+=v.get();
			if(obj.getDelay() >= 15){
				delayed_sum += v.get();
			}
		}

		ratio = delayed_sum / total_sum;

		context.write(new Text(obj.toString()), new Text(((int)total_sum) + "," + ((int)delayed_sum) + "," + ratio));
	}

}


/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/

/****************************
 * 
 * QUERY DRIVER
 *
 ***********************/

public class Query4 extends Configured implements Tool {

	private int numReducers;
	private Path inputPath;
	private Path outputDir;

	@Override
	public int run(String[] args) throws Exception {

		Job job1 = new Job(this.getConf(), "Keys count Airplane Q3");
		job1.setJarByClass(Query4.class);
		job1.setNumReduceTasks(numReducers);

		job1.setInputFormatClass(TextInputFormat.class);

		job1.setMapperClass(WCAirplaneMapper.class);
		job1.setMapOutputKeyClass(CompositeKey.class);
		job1.setMapOutputValueClass(IntWritable.class);

		job1.setReducerClass(WCAirplaneReducer.class);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(IntWritable.class);

		job1.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job1, inputPath);
		FileOutputFormat.setOutputPath(job1, outputDir);

		job1.setNumReduceTasks(Integer.parseInt(args[0]));

		/**************************************************************/


		return job1.waitForCompletion(true) ? 0 : 1;		
	}

	public Query4 (String[] args) {
		if (args.length != 3) {
			System.out.println("Usage: WordCount <num_reducers> <input_path> <output_path>");
			System.exit(0);
		}
		this.numReducers = Integer.parseInt(args[0]);
		this.inputPath = new Path(args[1]);
		this.outputDir = new Path(args[2]);
	}

	public static void main(String args[]) throws Exception {
		int res = ToolRunner.run(new Configuration(), new Query4(args), args);
		System.exit(res);
	}
}

/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/


