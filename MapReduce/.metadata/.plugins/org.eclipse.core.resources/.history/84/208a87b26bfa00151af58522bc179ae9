package fr.eurecom.dsg.mapreduce;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.io.WritableUtils;

import org.apache.hadoop.mapred.lib.HashPartitioner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


/****************************
 * 
 * OGGETTI DI LAVORO
 *
 ***********************/

enum WayType {
	INBOUND, OUTBOUND
}

class MutableInt {
	  int value = 1; // note that we start at 1 since we're counting
	  public void increment () { ++value;      }
	  public int  get ()       { return value; }
	}

class CompositeKey implements WritableComparable {

	private String dcode;
	private String month;
	private WayType wayType;

	public CompositeKey() {
	}

	public CompositeKey(String udid, String datetime) {

		this.dcode = udid;
		this.month = datetime;
	}

	@Override
	public String toString() {

		return (new StringBuilder()).append(month).append(',').append(dcode).toString();
	}

	@Override
	public void readFields(DataInput in) throws IOException {

		dcode = WritableUtils.readString(in);
		month = WritableUtils.readString(in);
	}

	@Override
	public void write(DataOutput out) throws IOException {

		WritableUtils.writeString(out, dcode);
		WritableUtils.writeString(out, month);
	}

	public String getUDID() {

		return dcode;
	}

	public void setUDID(String udid) {

		this.dcode = udid;
	}

	public String getDatetime() {

		return month;
	}

	public void setDatetime(String datetime) {

		this.month = datetime;
	}

	public WayType getWayType(){
		return wayType;
	}

	public void setWayType(WayType wayType){
		this.wayType = wayType;
	}

	@Override
	public int compareTo(Object o) {
		CompositeKey oComp = (CompositeKey) o;
		int result;
		Integer month1 = Integer.parseInt(month);
		Integer month2 = Integer.parseInt(oComp.month);		

		result = wayType.compareTo(oComp.getWayType());
		if(0 == result){
			result = month1.compareTo(month2);
			if (0 == result) {
				result = dcode.compareTo(oComp.getUDID());
			}
		}
		return result;
	}

}


/*****************************************************************************************/
/*************************** JOB 1 *******************************************************/
/*****************************************************************************************/

/****************************
 * 
 * MAPPER
 *
 ***********************/

class WCAirplaneMapper extends Mapper<LongWritable, //input key type
Text, //input value type
CompositeKey, //output key type
IntWritable> { //output value type

	protected boolean isNotEmpty(String s){
		return (s != null && !s.isEmpty());
	}

	protected boolean isNumber(String s){
		return s.matches("-?\\d+(\\.\\d+)?");
	}

	@Override
	protected void map(LongWritable key, //input key type
			Text value, //input value type
			Context context) throws IOException, InterruptedException {

		//the map method (use context.write to emit results)
		CompositeKey obj = new CompositeKey();

		String[] words = value.toString().split(",");
		String res;
		//mouth 1, dcode 17
		if(words.length > 17){
			words[1].replaceAll("[,;\\s]", "");
			words[17].replaceAll("[,;\\s]", "");
			//inbound
			if(isNotEmpty(words[1]) && isNotEmpty(words[17]) && isNumber(words[1])){
				obj.setDatetime(words[1]);
				obj.setUDID(words[17]);
				obj.setWayType(WayType.INBOUND);
				context.write(obj, new IntWritable(1));
			}
			//outbound
			if(isNotEmpty(words[1]) && isNotEmpty(words[16]) && isNumber(words[1])){
				obj.setDatetime(words[1]);
				obj.setUDID(words[16]);
				obj.setWayType(WayType.OUTBOUND);
				context.write(obj, new IntWritable(1));
			}
		}

	}

}

/****************************
 * 
 * REDUCER
 *
 ***********************/

class WCAirplaneReducer extends Reducer<CompositeKey, //input key type
IntWritable, //input value type
Text, //output key type
IntWritable> { //output value type

	Map<CompositeKey, Integer> inbound = new HashMap<CompositeKey, Integer>();
	Map<CompositeKey, Integer> outbound = new HashMap<CompositeKey, Integer>();
	Map<CompositeKey, Integer> total = new HashMap<CompositeKey, Integer>();
	
	@Override
	protected void reduce(CompositeKey obj, //input key type
			Iterable<IntWritable> values, //input value type
			Context context) throws IOException, InterruptedException {

		//reduce method (use context.write to emit results)
		int sum=0;
		
		for(IntWritable v:values){
			sum+=v.get();
		}

		if(total.containsKey(obj)){
			
		}
		else{
			if(obj.getWayType() == WayType.INBOUND){
				inbound.put(obj, sum);
				total.put(obj, sum);
			}
			else{
				outbound.put(obj, sum);
			}
		}
		
		context.write(new Text(obj.toString()), new IntWritable(sum));
	}
}

//usa cleanup, in cui fai il sort di 3 Map<> variabile globale di reduce


/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/

/****************************
 * 
 * QUERY DRIVER
 *
 ***********************/

public class Query1 extends Configured implements Tool {

	private int numReducers;
	private Path inputPath;
	private Path outputDir;
	private static final String OUTPUT_PATH = "intermediate_output";

	@Override
	public int run(String[] args) throws Exception {

		Job job1 = new Job(this.getConf(), "Keys count Airplane Q1");
		job1.setJarByClass(Query1.class);

		job1.setInputFormatClass(TextInputFormat.class);

		job1.setMapperClass(WCAirplaneMapper.class);
		job1.setMapOutputKeyClass(CompositeKey.class);
		job1.setMapOutputValueClass(IntWritable.class);

		job1.setReducerClass(WCAirplaneReducer.class);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(IntWritable.class);

		job1.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job1, new Path(args[1]));
		FileOutputFormat.setOutputPath(job1, new Path(args[1]));

		job1.setNumReduceTasks(Integer.parseInt(args[0]));

		/**************************************************************/


		return job1.waitForCompletion(true) ? 0 : 1;		
	}

	public Query1 (String[] args) {
		if (args.length != 3) {
			System.out.println("Usage: WordCount <num_reducers> <input_path> <output_path>");
			System.exit(0);
		}
		this.numReducers = Integer.parseInt(args[0]);
		this.inputPath = new Path(args[1]);
		this.outputDir = new Path(args[2]);
	}

	public static void main(String args[]) throws Exception {
		int res = ToolRunner.run(new Configuration(), new Query1(args), args);
		System.exit(res);
	}
}

/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/


